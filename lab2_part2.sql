--1 PRINT MESSAGE LIKE - ERROR OCCUR THAT IS: DIVIDE BY ZERO ERROR ENCOUNTERED.
BEGIN TRY
	SELECT 1/0;
END TRY
BEGIN CATCH
	SELECT 'ERROR IS'+ERROR_MESSAGE() AS ERROR
END CATCH


--2. PRINT ERROR MESSAGE IN INSERT STATEMENT USING ERROR_MESSAGE () FUNCTION: CONVERSION FAILED WHEN 
--CONVERTING DATETIME FROM CHARACTER STRING
BEGIN TRY
	DECLARE @DATE VARCHAR(100)='10/10/10'
	SELECT CONVERT(DATETIME ,@DATE,8989) AS NONO; 
END TRY
BEGIN CATCH 
	SELECT ERROR_MESSAGE() AS ERROR
END CATCH


--3. CREATE PROCEDURE WHICH PRINTS THE ERROR MESSAGE THAT “THE PLOGID IS ALREADY TAKEN. TRY ANOTHER 
--ONE”.

ALTER PROC PR_TAKEN
	@PLOG INT ,
	@PANME VARCHAR(50)
	AS
	BEGIN

		BEGIN TRY
			INSERT INTO PERSON_LOG22 VALUES(@PLOG,@PANME,'UPD',GETDATE());
		END TRY
		BEGIN CATCH
			PRINT 'PLOG ID IS ALRADY TAAKEN '
		END CATCH
	END 
	EXEC PR_TAKEN 1,'A'
--4. CREATE PROCEDURE THAT PRINT THE SUM OF TWO NUMBERS: TAKE BOTH NUMBER AS INTEGER & HANDLE 
--EXCEPTION WITH ALL ERROR FUNCTIONS IF ANY ONE ENTERS STRING VALUE IN NUMBERS OTHERWISE PRINT RESULT.

CREATE PROC PR_SUM
@NUMBER1 VARCHAR(2),
@NUMBER2 INT ,
@RESULT INT OUTPUT
AS BEGIN 
BEGIN TRY
	SET @RESULT=@NUMBER1+@NUMBER2;
END TRY
BEGIN CATCH 
	SELECT 
		ERROR_NUMBER() AS NUMBER,
		ERROR_SEVERITY() AS SEVIRITY,
		ERROR_STATE() AS STAT1,
		ERROR_PROCEDURE() AS [PROCEDURE],
		ERROR_MESSAGE() AS [MESSAGE],
		ERROR_LINE() AS LINE  
END CATCH
END

DECLARE @R INT 
EXEC PR_SUM 'AAA',20,@R OUTPUT 
PRINT @R
--5. THROW CUSTOM EXCEPTION USING STORED PROCEDURE WHICH ACCEPTS PLOGID AS INPUT & THAT THROWS 
--ERROR LIKE NO PLOGID IS AVAILABLE IN DATABASE.
CREATE PROC FIND 
	@PLOGID INT 
	AS BEGIN 
		IF EXISTS (SELECT * FROM PERSON_LOG22 WHERE PLOGID=@PLOGID)
			PRINT ('AVAILABLE')
		ELSE 
		THROW 50003,'NOT AVILABEL ID',2
		END
		EXEC FIND 5
	
--6. CREATE CURSOR WITH NAME PER_CURSOR WHICH TAKES PLOGID & PERSONNAME AS VARIABLE AND PRODUCE 
--COMBINE OUTPUT WITH PLOGID & PERSON NAME.

DECLARE @PLOGID INT ,@PERSONNAME VARCHAR(250)
DECLARE PER_CURSOR CURSOR 
FOR SELECT PLOGID,PERSONNAME FROM PERSON_LOG22
		OPEN PER_CURSOR;
		FETCH NEXT FROM PER_CURSOR INTO @PLOGID,@PERSONNAME;
			WHILE @@FETCH_STATUS =0
				BEGIN PRINT CONCAT(@PLOGID,'-',@PERSONNAME);
			FETCH NEXT FROM PER_CURSOR INTO @PLOGID,@PERSONNAME;
		END 
CLOSE PER_CURSOR;
DEALLOCATE PRE_CURSOR;

--7. USE TABLE STUDENT (ID, RNO, ENROLLMENTNO, NAME, BRANCH, UNIVERSITY) - CREATE CURSOR THAT UPDATES 
--ENROLLMENT COLUMN AS COMBINATION OF BRANCH & ROLL NO. LIKE SOE22CE0001 AND SO ON. (22 IS 
--ADMISSION YEAR)'
DECLARE @BRANCH VARCHAR(50),@RNO INT;
DECLARE PERSON CURSOR
	FOR SELECT BRANCH ,RNO FROM STU1
	OPEN PERSON;
	FETCH NEXT FROM PERSON INTO @BRANCH,@RNO;
	WHILE @@FETCH_STATUS=0
		BEGIN UPDATE  STU1 SET ENROLLMENT=CONCAT('SOE','22',@BRANCH,@RNO)
				WHERE RNO=@RNO;
			FETCH NEXT FROM PERSON INTO @BRANCH,@RNO;
			END 
CLOSE PERSON;
DEALLOCATE PERSON;
INSERT  INTO STU1 VALUES (2,0002,2,'B','CE','DU')
SELECT * FROM STU1